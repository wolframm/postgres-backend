import 'package:pub_semver/pub_semver.dart';
import 'package:pubspec_parse/pubspec_parse.dart';

import '../pg/directive.dart' as d;
import '../pg/directive.dart';
import '../pubspec.yaml.g.dart' as p;
import 'utils.dart';

Future<void> generatePubspecs() async {
  for (final target in d.Target.all) {
    _generateDartPubspec(target);
    if (!target.serverOnly) _generateFlutterPubspec(target);
    print('Data models generated for @${target.name}');
  }
}

_generateDartPubspec(Target target) {
  final name = target.name + '_server';
  final description =
      'Server library generated by Postgres Backend CLI (v. ${p.Pubspec.version.canonical})';
  final environment = _environment('sdk');
  final Map<String, Dependency> dependencies = _dependency('pb_server');
  final ps = Pubspec(name,
      description: description,
      environment: environment,
      dependencies: dependencies);
  _add(LibraryType.server, target, ps);
}

Map<String, VersionConstraint> _environment(String name) =>
    {name: VersionConstraint.parse(p.Pubspec.environment[name]!)};

Map<String, Dependency> _dependency(String package) => {
      package: HostedDependency(
          version: VersionConstraint.parse(
              p.Pubspec.dependencies[package].toString()))
    };

_generateFlutterPubspec(Target target) {}

_add(LibraryType libraryType, d.Target target, Pubspec ps) => GeneratedFile.add(
    libraryType, target, ['pubspec'], FileType.yaml, ps.toString());
