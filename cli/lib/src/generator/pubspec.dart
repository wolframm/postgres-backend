import 'dart:io';

import 'package:args/args.dart';
import 'package:path/path.dart' as p;
import 'package:yaml_writer/yaml_writer.dart';

import '../arguments.dart';
import '../pg/directive.dart' as d;
import '../pg/directive.dart';
import '../pubspec.yaml.g.dart' as ps;
import '../pubspec_client.yaml.g.dart' as ps_client;
import '../pubspec_converter.yaml.g.dart' as ps_converter;
import '../pubspec_server.yaml.g.dart' as ps_server;
import 'utils.dart';

final _cli_version = ps.Pubspec.version.canonical;

generatePubspecs(ArgResults argResults) {
  final localLibs = localLibsDir(argResults);
  for (final target in d.Target.all) {
    _dartPubspec(target, localLibs);
    if (!target.serverOnly) _flutterPubspec(target, localLibs);
    print('Pubspec generated for @${target.name}');
  }
}

String _converter(Directory? localLibs) => localLibs == null
    ? ps_converter.Pubspec.version.canonical
    : _libPath('converter', localLibs);

_dartPubspec(Target target, Directory? localLibs) {
  final dependencies = {
    'pb_converter': _converter(localLibs),
    'pb_server': localLibs == null
        ? ps_server.Pubspec.version.canonical
        : _libPath('server', localLibs)
  };
  final yamlDoc = YamlWriter().write({
    'name': target.name,
    'description': 'Server lib generated by PB CLI (v. $_cli_version)',
    'environment': ps_server.Pubspec.environment,
    'dependencies': dependencies,
  });
  _add(LibraryType.server, target, yamlDoc);
}

_flutterPubspec(Target target, Directory? localLibs) {
  final dependencies = {
    'pb_converter': _converter(localLibs),
    'pb_client': localLibs == null
        ? ps_client.Pubspec.version.canonical
        : _libPath('client', localLibs)
  };
  final yamlDoc = YamlWriter().write({
    'name': target.name,
    'description': 'Flutter lib generated by PB CLI (v. $_cli_version)',
    'environment': ps_client.Pubspec.environment,
    'dependencies': dependencies,
  });
  _add(LibraryType.client, target, yamlDoc);
}

Map<String, String> _libPath(String libName, Directory localLibs) {
  final path = p.join(localLibs.absolute.path, libName);
  return {'path': path};
}

_add(LibraryType libraryType, d.Target target, String pubspecYaml) =>
    GeneratedCode.add(
        libraryType, target, ['pubspec'], FileType.yaml, pubspecYaml);
