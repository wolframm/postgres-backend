import 'package:pub_semver/pub_semver.dart';
import 'package:pubspec_parse/pubspec_parse.dart';

import '../pg/directive.dart' as d;
import '../pg/directive.dart';
import '../pubspec.yaml.g.dart' as p;
import '../pubspec_client.yaml.g.dart' as p_client;
import '../pubspec_client.yaml.g.dart' as p_server;
import 'utils.dart';

enum DependencySource {
  client,
  server,
}

generatePubspecs() {
  for (final target in d.Target.all) {
    _dartPubspec(target);
    if (!target.serverOnly) _flutterPubspec(target);
    print('Data models generated for @${target.name}');
  }
}

_dartPubspec(Target target) {
  final description =
      'Server library generated by Postgres Backend CLI (v. ${p.Pubspec.version.canonical})';
  final pubspec = Pubspec(target.name + '_server',
      description: description,
      environment: _environment(p_server.Pubspec.environment),
      dependencies: Map.fromEntries([
        _dependencyEntry('pb_server', p_server.Pubspec.version.toString())
      ]));
  _add(LibraryType.server, target, pubspec);
}

_flutterPubspec(Target target) {
  final description =
      'Client library generated by Postgres Backend CLI (v. ${p.Pubspec.version.canonical})';
  final ps = Pubspec(target.name + '_client',
      description: description,
      environment: _environment(p_client.Pubspec.environment),
      dependencies: Map.fromEntries([
        _dependencyEntry('pb_client', p_client.Pubspec.version.toString())
      ]));
  _add(LibraryType.server, target, ps);
}

Map<String, VersionConstraint> _environment(Map<String, String> env) =>
    env.map<String, VersionConstraint>((String sdk, String constraint) =>
        MapEntry(
            sdk, VersionConstraint.parse(p.Pubspec.environment[constraint]!)));

MapEntry<String, Dependency> _dependencyEntry(String package, String version) =>
    MapEntry(
        package, HostedDependency(version: VersionConstraint.parse(version)));

_add(LibraryType libraryType, d.Target target, Pubspec ps) => GeneratedCode.add(
    libraryType, target, ['pubspec'], FileType.yaml, ps.toString());
